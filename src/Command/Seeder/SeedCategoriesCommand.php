<?php

namespace App\Command\Seeder;

use Faker\Factory;
use Pimcore\Model\DataObject;
use Pimcore\Model\DataObject\Folder;
use Pimcore\Model\DataObject\Data\UrlSlug;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

#[AsCommand(
    name: 'app:seed:categories',
    description: 'Seeds a tree of Category objects (parents/children/grandchildren)'
)]
class SeedCategoriesCommand extends Command
{
    protected function configure(): void
    {
        $this
            ->addOption('parents', '-p', InputOption::VALUE_OPTIONAL, 'How many top-level categories', 10)
            ->addOption('children', '-c', InputOption::VALUE_OPTIONAL, 'Children per parent', 5)
            ->addOption('grandchildren', '-g', InputOption::VALUE_OPTIONAL, 'Grandchildren per child', 3);
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $faker = Factory::create();

        $rootPath      = '/Categories';
        $numParents    = (int)$input->getOption('parents');
        $numChildren   = (int)$input->getOption('children');
        $numGrandKids  = (int)$input->getOption('grandchildren');

        $rootFolder = $this->ensureFolderPath($rootPath);

        $created = 0;

        for ($p = 0; $p < $numParents; $p++) {
            $parent = $this->createCategory($faker->words(rand(1, 2), true), $rootFolder, $rootPath);
            $created++;

            for ($c = 0; $c < $numChildren; $c++) {
                $child = $this->createCategory($faker->words(rand(1, 3), true), $parent, $rootPath);
                $created++;

                for ($g = 0; $g < $numGrandKids; $g++) {
                    $this->createCategory($faker->words(rand(1, 3), true), $child, $rootPath);
                    $created++;
                }
            }
        }

        $io->success("Created {$created} Category objects under '{$rootPath}' (parents={$numParents}, children={$numChildren}, grandchildren={$numGrandKids}).");
        return Command::SUCCESS;
    }

    private function createCategory(string $name, DataObject\Concrete|Folder $parent, string $rootPath): DataObject\Category
    {
        $name = trim($name);
        $slugBase = $this->slugify($name);
        $keyBase  = $slugBase ?: 'category';

        $key = $keyBase;
        $suffix = 1;
        while (DataObject::getByPath($this->buildPath($parent) . '/' . $key)) {
            $key = $keyBase . '-' . (++$suffix);
        }

        $category = new DataObject\Category();
        $category->setParent($parent);
        $category->setKey($key);
        $category->setPublished(true);

        $category->setName($name);
        $category->setDescription('Autogenerated category for testing.');

        $slugPath = $this->publicSlugFromObjectPath($this->buildPath($parent) . '/' . $key, $rootPath);
        $category->setSlug([
            new UrlSlug($slugPath, null),
        ]);

        $category->save();
        return $category;
    }

    private function ensureFolderPath(string $path): Folder
    {
        $path = '/' . trim($path, '/');
        $parts = array_values(array_filter(explode('/', $path)));
        $current = Folder::getById(1);
        $built = '';

        foreach ($parts as $part) {
            $built .= '/' . $part;
            $existing = DataObject::getByPath($built);
            if ($existing instanceof Folder) {
                $current = $existing;
                continue;
            }
            $folder = new Folder();
            $folder->setKey($part);
            $folder->setParent($current);
            $folder->save();
            $current = $folder;
        }

        return $current;
    }

    private function slugify(string $value): string
    {
        $value = mb_strtolower($value, 'UTF-8');
        $value = preg_replace('~[^\pL\d]+~u', '-', $value);
        $value = trim($value, '-');
        $value = preg_replace('~[-]+~', '-', $value);
        return $value ?: 'n-a';
    }

    private function buildPath(DataObject\Concrete|Folder $objOrFolder): string
    {
        return method_exists($objOrFolder, 'getFullPath')
            ? $objOrFolder->getFullPath()
            : ($objOrFolder->getPath() . $objOrFolder->getKey());
    }

    private function publicSlugFromObjectPath(string $objectPath, string $rootPath): string
    {
        $objectPath = '/' . trim($objectPath, '/');
        $rootPath   = '/' . trim($rootPath, '/');

        if (str_starts_with($objectPath, $rootPath)) {
            $relative = substr($objectPath, strlen($rootPath));
        } else {
            $relative = $objectPath;
        }

        $relative = '/' . trim($relative, '/');
        return $relative === '/' ? '/category' : $relative;
    }
}
